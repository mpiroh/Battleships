package sk.upjs.ics.android.battleships.provider;

import android.content.ContentProvider;
import android.content.ContentUris;
import android.content.ContentValues;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.net.Uri;
import android.util.Log;

import sk.upjs.ics.android.battleships.DatabaseOpenHelper;

import static android.content.ContentResolver.SCHEME_CONTENT;

public class ScoreContentProvider extends ContentProvider {

    public static final String AUTHORITY = "sk.upjs.ics.android.battleships.provider.ScoreContentProvider";
    public static final Uri CONTENT_URI = new Uri.Builder()
            .scheme(SCHEME_CONTENT)
            .authority(AUTHORITY)
            .appendPath(Provider.Score.TABLE_NAME)
            .build();
    private static final int URI_MATCH_SCORES = 0;
    private static final int URI_MATCH_SCORES_BY_ID = 1;
    public static final String AUTOGENERATED_ID = null;

    private DatabaseOpenHelper databaseOpenHelper;
    private UriMatcher uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);

    public ScoreContentProvider() {
    }

    @Override
    public boolean onCreate() {
        this.databaseOpenHelper = new DatabaseOpenHelper(getContext());

        uriMatcher.addURI(AUTHORITY, Provider.Score.TABLE_NAME, URI_MATCH_SCORES);
        uriMatcher.addURI(AUTHORITY, Provider.Score.TABLE_NAME + "/#", URI_MATCH_SCORES_BY_ID);

        return true;
    }

    @Override
    public Cursor query(Uri uri, String[] projection, String selection,
                        String[] selectionArgs, String sortOrder) {
        SQLiteDatabase db = databaseOpenHelper.getReadableDatabase();
        Cursor cursor = db.query(Provider.Score.TABLE_NAME, null, selection, selectionArgs, null, null, null);
        cursor.setNotificationUri(getContext().getContentResolver(), uri);
        return cursor;
    }

    @Override
    public Uri insert(Uri uri, ContentValues values) {
        Log.d("here", "1");
        switch (uriMatcher.match(uri)) {
            case URI_MATCH_SCORES:
                return saveScore(values);
            default:
                return null;
        }
    }

    private Uri saveScore(ContentValues values) {
        Log.d("here", "2");
        ContentValues score = new ContentValues();
        score.put(Provider.Score._ID, AUTOGENERATED_ID);
        score.put(Provider.Score.NICK, values.getAsString(Provider.Score.NICK));
        score.put(Provider.Score.WINNER, values.getAsInteger(Provider.Score.WINNER));
        score.put(Provider.Score.TIME, values.getAsInteger(Provider.Score.TIME));
        score.put(Provider.Score.DIFFICULTY, values.getAsString(Provider.Score.DIFFICULTY));
        score.put(Provider.Score.SHOTS_NUMBER, values.getAsInteger(Provider.Score.SHOTS_NUMBER));
        score.put(Provider.Score.POINTS, values.getAsInteger(Provider.Score.POINTS));

        SQLiteDatabase db = databaseOpenHelper.getWritableDatabase();
        long newId = db.insert(Provider.Score.TABLE_NAME, null, score);
        return ContentUris.withAppendedId(CONTENT_URI, newId);
    }

    @Override
    public int delete(Uri uri, String selection, String[] selectionArgs) {
        switch (uriMatcher.match(uri)) {
            case URI_MATCH_SCORES_BY_ID:
                long id = ContentUris.parseId(uri);
                SQLiteDatabase db = databaseOpenHelper.getWritableDatabase();
                int affectedRows = db.delete(Provider.Score.TABLE_NAME, Provider.Score._ID + " = " + id, null);
                getContext().getContentResolver().notifyChange(CONTENT_URI, null);
                return affectedRows;
            default:
                return 0;
        }
    }

    @Override
    public String getType(Uri uri) {
        // TODO: Implement this to handle requests for the MIME type of the data
        // at the given URI.
        throw new UnsupportedOperationException("Not yet implemented");
    }

    @Override
    public int update(Uri uri, ContentValues values, String selection,
                      String[] selectionArgs) {
        // TODO: Implement this to handle requests to update one or more rows.
        throw new UnsupportedOperationException("Not yet implemented");
    }
}
